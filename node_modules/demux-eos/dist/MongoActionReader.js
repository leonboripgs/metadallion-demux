"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const Logger = __importStar(require("bunyan"));
const demux_1 = require("demux");
const mongodb_1 = require("mongodb");
const MongoBlock_1 = require("./MongoBlock");
function wait(ms) {
    return new Promise((resolve) => {
        setTimeout(resolve, ms);
    });
}
/**
 * Implementation of an ActionReader that reads blocks from a mongodb instance.
 */
class MongoActionReader extends demux_1.AbstractActionReader {
    constructor(mongoEndpoint = "mongodb://127.0.0.1:27017", startAtBlock = 1, onlyIrreversible = false, maxHistoryLength = 600, dbName = "EOS") {
        super(startAtBlock, onlyIrreversible, maxHistoryLength);
        this.mongoEndpoint = mongoEndpoint;
        this.startAtBlock = startAtBlock;
        this.onlyIrreversible = onlyIrreversible;
        this.maxHistoryLength = maxHistoryLength;
        this.dbName = dbName;
        this.mongodb = null;
        this.log = Logger.createLogger({ name: "demux" });
    }
    initialize() {
        return __awaiter(this, void 0, void 0, function* () {
            const mongoInstance = yield mongodb_1.MongoClient.connect(this.mongoEndpoint, { useNewUrlParser: true });
            this.mongodb = yield mongoInstance.db(this.dbName);
        });
    }
    getHeadBlockNumber(numRetries = 120, waitTimeMs = 250) {
        return __awaiter(this, void 0, void 0, function* () {
            this.throwIfNotInitialized();
            let numTries = 1;
            while (numTries <= numRetries + 1) {
                try {
                    const [blockInfo] = yield this.mongodb.collection("block_states")
                        .find({})
                        .limit(1)
                        .sort({ $natural: -1 })
                        .toArray();
                    return blockInfo.block_header_state.block_num;
                }
                catch (err) {
                    if (numTries - 1 === numRetries) {
                        throw err;
                    }
                    this.log.error("error getting head block number, retrying...");
                }
                numTries += 1;
                yield wait(waitTimeMs);
            }
            throw Error("Unknown error getting head block number.");
        });
    }
    getLastIrreversibleBlockNumber(numRetries = 120, waitTimeMs = 250) {
        return __awaiter(this, void 0, void 0, function* () {
            this.throwIfNotInitialized();
            let numTries = 1;
            while (numTries <= numRetries + 1) {
                try {
                    const [blockInfo] = yield this.mongodb.collection("block_states")
                        .find({})
                        .limit(1)
                        .sort({ $natural: -1 })
                        .toArray();
                    return blockInfo.block_header_state.dpos_irreversible_blocknum;
                }
                catch (err) {
                    if (numTries - 1 === numRetries) {
                        throw err;
                    }
                    this.log.error("error getting last irreversible block number, retrying...");
                }
                numTries += 1;
                yield wait(waitTimeMs);
            }
            throw Error("Unknown error getting last irreversible block number.");
        });
    }
    getBlock(blockNumber, numRetries = 120, waitTimeMs = 250) {
        return __awaiter(this, void 0, void 0, function* () {
            this.throwIfNotInitialized();
            let numTries = 1;
            while (numTries <= numRetries + 1) {
                try {
                    const blockStates = yield this.mongodb.collection("block_states")
                        .find({ block_num: blockNumber })
                        .toArray();
                    this.validateBlockStates(blockStates, blockNumber);
                    const [blockState] = blockStates;
                    const rawActions = yield this.mongodb.collection("action_traces")
                        .find({
                        block_num: blockNumber,
                        producer_block_id: blockState.block_id,
                    })
                        .sort({ "receipt.global_sequence": 1 })
                        .toArray();
                    return new MongoBlock_1.MongoBlock(blockState, rawActions);
                }
                catch (err) {
                    if (numTries - 1 === numRetries) {
                        throw err;
                    }
                    this.log.error("error retrieving block, retrying...");
                }
                numTries += 1;
                yield wait(waitTimeMs);
            }
            throw Error("Unknown error getting block.");
        });
    }
    throwIfNotInitialized() {
        if (!this.mongodb) {
            throw Error("MongoActionReader must be initialized before fetching blocks.");
        }
    }
    validateBlockStates(blockStates, blockNumber) {
        if (blockStates.length === 0) {
            throw new Error(`No block state with block number ${blockNumber} found`);
        }
        else if (blockStates.length > 1) {
            throw new Error(`More than one block state returned for block number ${blockNumber}. ` +
                "Make sure you have the `--mongodb-update-via-block-num` flag set on your node.");
        }
    }
}
exports.MongoActionReader = MongoActionReader;
