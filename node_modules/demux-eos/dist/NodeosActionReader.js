"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Logger = __importStar(require("bunyan"));
const demux_1 = require("demux");
const request_promise_native_1 = __importDefault(require("request-promise-native"));
const NodeosBlock_1 = require("./NodeosBlock");
function wait(ms) {
    return new Promise((resolve) => {
        setTimeout(resolve, ms);
    });
}
/**
 * Reads from an EOSIO nodeos node to get blocks of actions.
 * It is important to note that deferred transactions will not be included,
 * as these are currently not accessible without the use of plugins.
 */
class NodeosActionReader extends demux_1.AbstractActionReader {
    constructor(nodeosEndpoint = "http://localhost:8888", startAtBlock = 1, onlyIrreversible = false, maxHistoryLength = 600) {
        super(startAtBlock, onlyIrreversible, maxHistoryLength);
        this.startAtBlock = startAtBlock;
        this.onlyIrreversible = onlyIrreversible;
        this.maxHistoryLength = maxHistoryLength;
        this.nodeosEndpoint = nodeosEndpoint.replace(/\/+$/g, ""); // Removes trailing slashes
        this.log = Logger.createLogger({ name: "demux" });
    }
    /**
     * Returns a promise for the head block number.
     */
    getHeadBlockNumber(numRetries = 120, waitTimeMs = 250) {
        return __awaiter(this, void 0, void 0, function* () {
            let numTries = 1;
            while (numTries <= numRetries + 1) {
                try {
                    const blockInfo = yield request_promise_native_1.default.get({
                        url: `${this.nodeosEndpoint}/v1/chain/get_info`,
                        json: true,
                    });
                    return blockInfo.head_block_num;
                }
                catch (err) {
                    if (numTries - 1 === numRetries) {
                        throw err;
                    }
                    this.log.error("error getting head block number, retrying...");
                }
                numTries += 1;
                yield wait(waitTimeMs);
            }
            throw Error("Unknown error getting head block number.");
        });
    }
    getLastIrreversibleBlockNumber(numRetries = 120, waitTimeMs = 250) {
        return __awaiter(this, void 0, void 0, function* () {
            let numTries = 1;
            while (numTries <= numRetries + 1) {
                try {
                    const blockInfo = yield request_promise_native_1.default.get({
                        url: `${this.nodeosEndpoint}/v1/chain/get_info`,
                        json: true,
                    });
                    return blockInfo.last_irreversible_block_num;
                }
                catch (err) {
                    if (numTries - 1 === numRetries) {
                        throw err;
                    }
                    this.log.error("error getting last irreversible block number, retrying...");
                }
                numTries += 1;
                yield wait(waitTimeMs);
            }
            throw Error("Unknown error getting last irreversible block number.");
        });
    }
    /**
     * Returns a promise for a `NodeosBlock`.
     */
    getBlock(blockNumber, numRetries = 120, waitTimeMs = 250) {
        return __awaiter(this, void 0, void 0, function* () {
            let numTries = 1;
            while (numTries <= numRetries + 1) {
                try {
                    const rawBlock = yield request_promise_native_1.default.post({
                        url: `${this.nodeosEndpoint}/v1/chain/get_block`,
                        json: { block_num_or_id: blockNumber },
                    });
                    const block = new NodeosBlock_1.NodeosBlock(rawBlock);
                    return block;
                }
                catch (err) {
                    if (numTries - 1 === numRetries) {
                        throw err;
                    }
                    this.log.error("error retrieving block, retrying...");
                }
                numTries += 1;
                yield wait(waitTimeMs);
            }
            throw Error("Unknown error getting block.");
        });
    }
}
exports.NodeosActionReader = NodeosActionReader;
